// ================================================================================================
// This is the file that contains the connections to each of the collections that are necessary 
// to generate and store surveys in the database. This file also contains the tasks necessary,
// to generate and store surveys in the database.
// ================================================================================================
using Microsoft.Extensions.Caching.Memory;
using System.Linq;
namespace SpaceForceEvaluationAppLibrary.DataAccess;

public class MongoSurveyData : ISurveyData
{
    private readonly IMongoCollection<SurveyModel> _surveys;
    private readonly IUserData _users;
    private readonly IDbConnection _db;
    private readonly IMemoryCache _cache;
    private const string CacheName = "SurveyData";

    // here is the constructor that makes the connection to the database and makes
    // and initializes a connection to the SurveyCollection in the database.
    public MongoSurveyData(IDbConnection db, IUserData userData, IMemoryCache cache)
    {
        _users = userData;
        _db = db;
        _cache = cache;
        _surveys = db.SurveyCollection;
    }

    // Here is the task that returns a specific survey by searching for the
    // surveyID string.
    // TODO: update string variable so it doesnt search for the autogenerated object id,
    // unless that works better??? test later.
    public async Task<SurveyModel> GetSurvey(string id)
    {
        var results = await _surveys.FindAsync(s => s.Id == id);
        return results.FirstOrDefault();
    }

    // this task returns a list of survey models that the specified user
    // taken
    public async Task<List<SurveyModel>> GetListOfSurveys(string takerID)
    {
        var results = await _surveys.FindAsync(s => s.takerID == takerID);
        return results.ToList();
    }

    // this task returns a list of all surveys in the survey collection
    public async Task<List<SurveyModel>> GetAllSurveys()
    {
        var results = await _surveys.FindAsync(_ => true);
        return results.ToList();
    }

    // this task returns a list of all surveys about a specified user.
    public async Task<List<SurveyModel>> GetSurveysAboutUser(string subjectID)
    {
        var results = await _surveys.FindAsync(s => s.subjectID == subjectID);
        return results.ToList();
    }

    // this task returns a list of all surveys about a specified category
    public async Task<List<SurveyModel>> GetSurveysByCategory(string category)
    {
        var results = await _surveys.FindAsync(s => s.category == category);
        return results.ToList();
    }

    // this task returns a list of all surveys that a team has taken
    public async Task<List<SurveyModel>> GetSurveysByTeam(string teamID)
    {
        var results = await _surveys.FindAsync(s => s.teamID == teamID);
        return results.ToList();
    }

    public async Task<List<SurveyModel>> GetAllFreeResponse()
    {
        var results = await _surveys.FindAsync(s => s.surveyID == 0);
        return results.ToList();
    }

    //public async Task<List<SurveyModel>> GetAllUserFreeResponse(string userID)
    //{
    //      var results = await _surveys.FindAsync(s => s.surveyID == 0 && s.takerID == userID);
    //      return results.ToList();
    //}
    //public async Task<float> GetAvgOfCategory(string category)
    //{
    //    int i;
    //    float avg = 0;
    //    List<SurveyModel> results = await _surveys.FindAsync(s => s.category == category);
    //    results.ToList();
    //    foreach(var item in results)
    //    {
    //        avg += item.response;
    //        i++;
    //    }
    //    avg = avg / i;
    //    return avg;
    //}

    //public async Task<float> GetAvgOfTeam(string teamID)
    //{
    //     var results = await _surveys.FindAsync(s => s.teamID == teamID);
    //     var average = results.response.Average();
    //     return average.ToFloat();
    //}

    //public async Task<float> GetAvgOfTeamByCategory(string teamID, string category)
    //{
    //     var results = await _surveys.FindAysnc(s => s.teamID == teamID && s.category == category);
    //     var average = results.response.Average();
    //     return average.ToFloat();
    //}

    //public async Task<float> GetAvgOfUser(string userID)
    //{
    //     var results = await _surveys.FindAsync(s => s.takerID == userID);
    //     var average = results.response.Average();
    //     return average.ToFloat();
    //}

    //public async Task<float> GetAvgOfUserByCategory(string userID, string category)
    //{
    //     var results = await _surveys.FindAsync(s => s.TakerID == userID && s.category == category);
    //     var average = results.response.Average();
    //     return average.ToFloat();
    //}

    //public async Task<float> GetAvgAboutUser(string userID)
    //{
    //     var results = await _surveys.FindAsync(s => s.subjectID == userID);
    //     var average = results.response.Average();
    //     return average.ToFloat();
    //}

    //public async Task<float> GetAvgAboutUserByCategory(string userID, string category)
    //{
    //     var results = await _surveys.FindAsync(s => s.subjectID == userID && s.category == category);
    //     var average = results.response.Average();
    //     return average.ToFloat();
    //}   
    //public Task UpdateSurvey(SurveyModel survey)
    //{
    //    var user = _users.GetUser(survey.takerID);
    //    survey.name = user.firstName + " " + user.lastName;
    //    var filter = Builders<SurveyModel>.Filter.Eq("takerID", survey.takerID);
    //    return _surveys.ReplaceOne(filter, survey, new ReplaceOptions { IsUpsert = true });
    //}

    // This task creates a new survey in the database
    public Task CreateSurvey(SurveyModel survey)
    {
        return _surveys.InsertOneAsync(survey);
    }
}
