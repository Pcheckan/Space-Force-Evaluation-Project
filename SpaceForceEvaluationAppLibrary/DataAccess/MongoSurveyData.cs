// ================================================================================================
// This is the file that contains the connections to each of the collections that are necessary 
// to generate and store surveys in the database. This file also contains the tasks necessary,
// to generate and store surveys in the database.
// ================================================================================================
using Microsoft.Extensions.Caching.Memory;
namespace SpaceForceEvaluationAppLibrary.DataAccess;

public class MongoSurveyData : ISurveyData
{
    private readonly IMongoCollection<SurveyModel> _surveys;
    private readonly IUserData _users;
    private readonly IDbConnection _db;
    private readonly IMemoryCache _cache;
    private const string CacheName = "SurveyData";

    // here is the constructor that makes the connection to the database and makes
    // and initializes a connection to the SurveyCollection in the database.
    public MongoSurveyData(IDbConnection db, IUserData userData, IMemoryCache cache)
    {
        _users = userData;
        _db = db;
        _cache = cache;
        _surveys = db.SurveyCollection;
    }

    // Here is the task that returns a specific survey by searching for the
    // surveyID string.
    // TODO: update string variable so it doesnt search for the autogenerated object id,
    // unless that works better??? test later.
    public async Task<SurveyModel> GetSurvey(string id)
    {
        var results = await _surveys.FindAsync(s => s.Id == id);
        return results.FirstOrDefault();
    }

    // here is the task that updates the survey passed into the task.
    public async Task UpdateSurvey(SurveyModel survey)
    {
        await _surveys.ReplaceOneAsync(s => s.Id == survey.Id, survey);
        _cache.Remove(CacheName);
    }

    // this task returns a list of survey models that the specified user
    // taken
    public async Task<List<SurveyModel>> GetListOfSurveys(string takerID)
    {
        var results = await _surveys.FindAsync(s => s.takerID == takerID);
        return results.ToList();
    }

    // this task returns a list of all surveys in the survey collection
    public async Task<List<SurveyModel>> GetAllSurveys()
    {
        var results = await _surveys.FindAsync(_ => true);
        return results.ToList();
    }

    // this task returns a list of all surveys about a specified user.
    public async Task<List<SurveyModel>> GetSurveysAboutUser(string subjectID)
    {
        var results = await _surveys.FindAsync(s => s.subjectID == subjectID);
        return results.ToList();
    }

    // this task returns a list of all surveys about a specified category
    public async Task<List<SurveyModel>> GetSurveysByCategory(string category)
    {
        var results = await _surveys.FindAsync(s => s.category == category);
        return results.ToList();
    }

    // this task returns a list of all surveys that a team has taken
    public async Task<List<SurveyModel>> GetSurveysByTeam(string teamID)
    {
        var results = new List<SurveyModel>();
        List<UserModel> users = await _users.GetUsersFromTeam(teamID);
        foreach (UserModel user in users)
        {
            var userSurveys = await _surveys.FindAsync(s => s.takerID == user.userID);
            results.Add((SurveyModel)userSurveys);
        }
        return results.ToList();
    }

    // This task creates a new survey in the database
    public Task CreateSurvey(SurveyModel survey)
    {
        return _surveys.InsertOneAsync(survey);
    }
}
