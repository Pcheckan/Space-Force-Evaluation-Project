@page "/Reports"
@attribute [Authorize]
@inject ISurveyData surveyData
@inject IUserData userData
@inject AuthenticationStateProvider authProvider

<div class="mainDiv">
    <h1>Reports</h1>
<button class="renderButton" @onclick=ShowCategories>Category Reports</button>
<button class="renderButton" @onclick=ShowAll>All Reports</button>
<button class="renderButton" @onclick=ShowDateRange>Show Reports by Date</button>
<button class="renderButton" @onclick=ShowIndividualQuestions>Show Individual Questions</button>
<button class="renderButton" @onclick=ShowTextResponses>Show Text Response Questions</button>
<div class="reportComponent" style="visibility: @showCategories">
        <SpaceForceEvaluations.Components.CategoriesReport></SpaceForceEvaluations.Components.CategoriesReport>  
</div>

<div class ="reportComponent scroll" style="visibility: @showAll">
        <SpaceForceEvaluations.Components.ShowAllReportsHolder surveyQuestion="@surveyQuestion"></SpaceForceEvaluations.Components.ShowAllReportsHolder>   
</div>

<div class="reportComponent" style="visibility: @showDateRange">
    <SpaceForceEvaluations.Components.SurveyTakenInRange surveyQuestion="@surveyQuestion"></SpaceForceEvaluations.Components.SurveyTakenInRange>
</div>
<div class="reportComponent" style="visibility: @showIndividuals">
    <SpaceForceEvaluations.Components.IndividualQuestionsReportsHolder surveyQuestion="@surveyQuestion"></SpaceForceEvaluations.Components.IndividualQuestionsReportsHolder>
</div>
<div class="reportComponent" style="visibility: @showTextResponses">
    <SpaceForceEvaluations.Components.TextResponseReportHolder surveyQuestion="@surveyQuestion"></SpaceForceEvaluations.Components.TextResponseReportHolder>
</div>

    <AuthorizeView Policy="Admin">
        <Authorized>
                <button class="btn-primary" @onclick=ShowTeam>Show Team Reports</button>

                <div class="" style="visibility: @showTeam">
                    <SpaceForceEvaluations.Components.TeamAccoladesReportHolder></SpaceForceEvaluations.Components.TeamAccoladesReportHolder>
                </div>

                <div class="container" style="visibility: @showTeam">
                    <h3 class="p-3 text-center">Reports List: </h3>
                    <div class="scroll">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>QuestionID</th>
                                    <th>Question Text</th>
                                    <th>Taker ID</th>
                                    <th>Taker Name</th>
                                    <th>Response</th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var SurveyModel in teamQuestions)
                                {
                                    <tr>
                                            <td>@SurveyModel.surveyID</td>
                                            <td>@SurveyModel.question</td>
                                            <td>@SurveyModel.takerID</td>
                                            <td>@SurveyModel.name</td>
                                            <td>@SurveyModel.response</td>
                                    </tr>                               
                                }                                   
                            </tbody>
                        </table>
                    </div>
                </div>
        </Authorized>

    </AuthorizeView>
</div>

@code {

    string showTeam = "hidden";
    private string teamID;
    public bool disableButton = false;
    public string showCategories = "hidden";
    public string showAll = "hidden";
    public string showDateRange = "hidden";
    public string showIndividuals = "hidden";
    public string showTextResponses = "hidden";
    public bool shouldRender = true;
    private SurveyModel surveyModel = new SurveyModel();

    // create a new list of survey models called survey question
    List<SurveyModel> surveyQuestion = new List<SurveyModel>();
    List<SurveyModel> teamQuestions = new List<SurveyModel>();
    List<SurveyModel> categoryQuestions = new List<SurveyModel>();



    public int i, j, k = 0;
    public int z = 0;

    public string[] testUser = new string[1000000];
    public string userHolder;


    // Functions to show and hide buttons
    private void ShowDateRange()
    {
        if (showDateRange == "hidden")
        {
            showDateRange = "";
            showAll = "hidden";
            showTeam = "hidden";
            showCategories = "hidden";
            showIndividuals = "hidden"; 
            showTextResponses = "hidden";  
        }
        else
        {
            showDateRange = "hidden";
        }
    }
    private void ShowCategories()
    {
        if (showCategories == "hidden")
        {
            showCategories = "";
            showAll = "hidden";
            showTeam = "hidden";
            showDateRange = "hidden";
            showIndividuals = "hidden"; 
            showTextResponses = "hidden";  
        }
        else
        {
            showCategories = "hidden";
        }
    }

    private void ShowAll()
    {
        if (showAll == "hidden")
        {
            showAll = "";
            showTeam = "hidden";
            showCategories = "hidden";
            showDateRange = "hidden";
            showIndividuals = "hidden"; 
            showTextResponses = "hidden";  
        }
        else
        {
            showAll = "hidden";
        }
    }
    private async Task ShowTeam()
    {
        if (showTeam=="hidden")
        {
            showTeam = "";
            showAll = "hidden";
            showCategories = "hidden";
            showDateRange = "hidden";
            showIndividuals = "hidden";  
            showTextResponses = "hidden";  
        }
        else
        {
            showTeam = "hidden";          
        }
    }

    private async Task ShowIndividualQuestions()
    {
        if (showIndividuals=="hidden")
        {
            showIndividuals = "";
            showAll = "hidden";
            showCategories = "hidden";
            showDateRange = "hidden";
            showTeam = "hidden";
            showTextResponses = "hidden";                      

        }
        else
        {
            showIndividuals = "hidden";
        }

    }
    private async Task ShowTextResponses()
    {
        if (showTextResponses=="hidden")
        {
            showTextResponses = "";
            showAll = "hidden";
            showCategories = "hidden";
            showDateRange = "hidden";
            showTeam = "hidden";
            showIndividuals = "hidden"; 
        }
        else
        {
            showTextResponses = "hidden";          
        }

    }

    private async Task<List<SurveyModel>> GetAllSurveys()
    {
        var results = await surveyData.GetAllSurveys();
        surveyQuestion = results.ToList();
        return surveyQuestion;
    }

    protected override async Task OnInitializedAsync()
    {

        await GetAllSurveys();
        await GetLogin();
        await GetTeamSurveys();
    }

    private async Task GetLogin()
    {
        UserModel currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
        teamID = currentUser.teamID;
    }
    private async Task <List<SurveyModel>> GetTeamSurveys()
    {
        var teamSurveys = await surveyData.GetSurveysByTeam(teamID);
        teamQuestions = teamSurveys.ToList();
        return teamQuestions;
    }
}
