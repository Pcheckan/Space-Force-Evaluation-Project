@inject IClimateQuestionsData questionData
@inject IDailyQuestionsData dailyQuestionData
@inject IUserData userData
@inject ISurveyData surveyData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider


<div class=maincomponent style="visibility: @showQuestion">
    <p>Please answer the following question to the best of your ability</p>
    <h5>@TestQuestion</h5>

    @if (@SurveyQuestionType == 2)
    {
        <h5>This question is in regards to your teammate @teammate</h5>
    }

    <EditForm Model="@surveyModel" OnValidSubmit="@HandleSubmit" id="dailyQuestionForm">
        <InputRadioGroup @bind-Value="@surveyModel.response">
            
            <InputRadio Value="1">1</InputRadio>
            <Label>Strongly Disagree &ensp;</Label>

            <InputRadio Value="2">2</InputRadio>
            <Label>Somewhat Disagree &ensp;</Label>

            <InputRadio Value="3">3</InputRadio>
            <Label>Neither Agree nor Disagree &ensp;</Label>

            <InputRadio Value="4">4</InputRadio>
            <Label>Somewhat Agree &ensp;</Label>

            <InputRadio Value="5">5</InputRadio>
            <Label>Strongly Agree &ensp;</Label>
        </InputRadioGroup>
        <div>
            <button type="submit">Submit</button>
        </div>
    </EditForm>

</div>

@code {
    [Parameter]
    public string questionType { get; set; }



    DateTime surveyDate;
    public string teammate;
    public string questionSubjectID;
    public int SurveyQuestionType;
    public int questionSubject;
    public int questionResponse;
    public int questionNumber;
    public string questionCategory;
    public string surveyTaker;
    public string surveySubject;
    private SurveyModel surveyModel = new SurveyModel();

    public string TestQuestion = "";
    public string showQuestion = "";
    private Random rnd = new Random();



    // We will need a function to get the maximum number of questions from the question bank

    private async Task HandleSubmit()
    {
        questionResponse = surveyModel.response;
        surveyModel.question = TestQuestion;
        surveyModel.surveyID = questionNumber;
        surveyModel.category = questionCategory;
        surveyModel.takerID = surveyTaker;
        surveyModel.subjectID = surveySubject;
        surveyDate = DateTime.Today;
        await surveyData.CreateSurvey(surveyModel);
        await UpdateUser();
        await ShowDiv();
        //navManager.NavigateTo("/Landing");

        // Get the date that the survey is done

        // store the date in the current logged in user
    }

    // Update the question date for the user answering the question
    private async Task UpdateUser()
    {
        var questionTaker = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);

        // Update the date that the user is taking the survey
        if (questionType == "Monthly")
        {
            questionTaker.monthlyDate = surveyDate; 
        }
        else if (questionType == "Weekly")
        {
            questionTaker.weeklyDate = surveyDate;
        }
        else 
        {
            questionTaker.dailyDate = surveyDate;           
        }


        await userData.UpdateUser(questionTaker); 
    }

    private int getMaxClimate()
    {
        return 166;
    }
    private int getMaxDaily()
    {
        return 68;
    }
    private int GetDailyQuestionNumber()
    {
        return rnd.Next(1,getMaxDaily());
    }
    private int GetClimateQuestionNumber()
    {
        return rnd.Next(1,getMaxClimate());
    }

    public async Task GenerateQuestion()
    {
        // Find out which type of question is going to be displayed
        // If 1, Question will be Climate
        GetQuestionType();
        var user = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
        if (SurveyQuestionType == 1)
        {
            ClimateQuestionsModel climateQuestionModel = await questionData.GetClimateQuestion(GetClimateQuestionNumber());
            TestQuestion = climateQuestionModel.text;
            questionNumber = climateQuestionModel.QuestionID;
            questionCategory = climateQuestionModel.category;
            surveyTaker = user.userID;            
        }
        // Else, Question will be Personnel
        else
        {
            // Pull in a list of users
            string subjectID = await GetListOfUsers(user.teamID);
            UserModel subject = await userData.GetUser(subjectID);
            teammate = subject.firstName + " " + subject.lastName;
            DailyQuestionsModel dailyQuestionModel = await dailyQuestionData.GetDailyQuestion(GetDailyQuestionNumber());
            TestQuestion = dailyQuestionModel.text;
            questionNumber = dailyQuestionModel.QuestionID;
            questionCategory = dailyQuestionModel.category;
            surveyTaker = user.userID;
            surveySubject = subject.userID;
        }
        user.dailyDate = surveyDate;
    }

    // Function to pull a list of users that are in the same "team" as the survey taker
    private async Task<string> GetListOfUsers(string teamId)
    {
        var results = await userData.GetUsersFromTeam(teamId);
        results.ToList();
        int questionSubject = rnd.Next(1, results.Count);
        // Get the user associated with int questionSubject
        return results[questionSubject].userID;
    }


    private int GetQuestionType()
    {
        return SurveyQuestionType = rnd.Next(1, 3);
    }
    protected override async Task OnInitializedAsync()
    {

        await GenerateQuestion();
    }

    private async Task ShowDiv()
    {
        if (showQuestion=="")
        {
            showQuestion = "hidden";
        }
        else
        {
          showQuestion = "";          
        }
    }

}
